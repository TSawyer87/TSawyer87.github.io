<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>NixOS Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on NixOS Blog</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Aug 2025 08:37:54 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hardening_NixOS</title>
      <link>http://localhost:1313/posts/hardening_nixos/</link>
      <pubDate>Sun, 10 Aug 2025 08:37:54 -0400</pubDate>
      <guid>http://localhost:1313/posts/hardening_nixos/</guid>
      <description>&lt;h1 id=&#34;hardening-nixos&#34;&gt;Hardening NixOS&lt;/h1&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/guy_fawks.png&#34;
         alt=&#34;guy fawks&#34; width=&#34;1000&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Securing your NixOS system begins with a philosophy of minimalism, explicit
configuration, and proactive control.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️ Warning: I am not a security expert. This guide presents various options
for hardening NixOS, but it is your responsibility to evaluate whether each
adjustment suits your specific needs and environment. Security hardening and
process isolation can introduce stability challenges, compatibility issues, or
unexpected behavior. Additionally, these protections often come with
performance tradeoffs. Always conduct thorough research, there are no plug and
play one size fits all security solutions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fork_clone_contribute</title>
      <link>http://localhost:1313/posts/fork_clone_contribute/</link>
      <pubDate>Sun, 15 Jun 2025 18:24:27 -0400</pubDate>
      <guid>http://localhost:1313/posts/fork_clone_contribute/</guid>
      <description>&lt;h1 id=&#34;fork-clone-contribute&#34;&gt;Fork, Clone, Contribute&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;a href=&#34;https://github.com/NixOS/nixpkgs&#34;&gt;Nixpkgs&lt;/a&gt; Repository.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click Fork, then Create a new Fork.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uncheck the box &amp;ldquo;Only fork the &lt;code&gt;master&lt;/code&gt; branch&amp;rdquo;, for development we will need
more branches for development.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you only fork master, you won&amp;rsquo;t have the &lt;code&gt;nixos-XX.YY&lt;/code&gt; release branches
available on your fork when you later try to create a PR against them, or
when you want to create a feature branch from them on your fork.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &lt;code&gt;&amp;lt;&amp;gt; Code&lt;/code&gt; and Clone the Repo. &lt;code&gt;saylesss88&lt;/code&gt; is the name of my GitHub,
yours will obviously be different.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nix_paths</title>
      <link>http://localhost:1313/posts/nix_paths/</link>
      <pubDate>Sun, 15 Jun 2025 18:21:05 -0400</pubDate>
      <guid>http://localhost:1313/posts/nix_paths/</guid>
      <description>&lt;h1 id=&#34;nix-paths&#34;&gt;Nix Paths&lt;/h1&gt;
&lt;p&gt;The following examples are done with a local &lt;code&gt;nixpkgs&lt;/code&gt; clone located at
&lt;code&gt;~/src/nixpkgs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Paths in Nix always need a &lt;code&gt;/&lt;/code&gt; in them and always expand to absolute paths
relative to your current directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix repl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-repl&amp;gt; ./.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/home/jr/src/nixpkgs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-repl&amp;gt; ./. + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/lib&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/home/jr/src/nixpkgs/lib
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nix does &lt;em&gt;path normalization&lt;/em&gt; every time you append strings, so if you just add
a slash &lt;code&gt;/&lt;/code&gt; its not actually there:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-repl&amp;gt; ./.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/home/jr/src/nixpkgs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-repl&amp;gt; ./. + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/home/jr/src/nixpkgs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-repl&amp;gt; ./. + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lib&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/home/jr/src/nixpkgslib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-repl&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;./.&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/lib&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# using ${./.} causes a store copy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;copying &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/homr/jr/src/nixpkgs&amp;#39;&lt;/span&gt; to the store
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/nix/store/3z9fzx8z03wslxvri5syv3jnnhn5fkbd-nixpkgs/lib&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-repl&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;toString ./.&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/lib&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# using toString avoids making a store copy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/jr/src/nixpkgs/lib&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-repl&amp;gt; ./lib/..             &lt;span style=&#34;color:#75715e&#34;&gt;# nix removes all `..` to avoid redundant path resolutions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/home/jr/src/nixpkgs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-repl&amp;gt; :q
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;realpath ./lib/..
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/home/jr/src/nixpkgs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ln -s pkgs/applications lib-symlink
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;realpath ./lib-symlink/..
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/home/jr/src/nixpkgs/pkgs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix repl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-repl&amp;gt; ./lib-symlink/..   &lt;span style=&#34;color:#75715e&#34;&gt;# Nix doesn&amp;#39;t read this file at all like realpath did&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/home/jr/src/nixpkgs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-repl&amp;gt; builtins.readDir ./. &lt;span style=&#34;color:#75715e&#34;&gt;# listing of all entries in current dir and their types&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.devcontainer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;directory&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.editorconfig&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;regular&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.git&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;directory&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.git-blame-ignore-revs&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;regular&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.gitattributes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;regular&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.github&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;directory&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.gitignore&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;regular&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.mailmap&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;regular&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.mergify.yml&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;regular&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.version&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;symlink&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CONTRIBUTING.md&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;regular&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  COPYING &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;regular&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;README.md&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;regular&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ci &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;directory&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default.nix&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;regular&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  doc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;directory&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flake.nix&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;regular&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lib &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;directory&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  maintainers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;directory&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  nixos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;directory&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  pkgs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;directory&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shell.nix&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;regular&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-repl&amp;gt; builtins.readFile ./default.nix
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let\n  requiredVersion = import ./lib/minver.nix;\nin\n\nif !builtins ? nixVersion
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; || builtins.compareVersions requiredVersion builtins.nixVersion == 1 then\n\n  abort
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#39;&amp;#39;\n\n    This version of Nixpkgs requires Nix &amp;gt;= \${requiredVersion}, please
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; upgrade:\n\n    - If you are running NixOS, `nixos-rebuild&amp;#39; can be used to upgrade
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; your system.\n\n    - Alternatively, with Nix &amp;gt; 2.0 `nix upgrade-nix&amp;#39; can be used
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; to imperatively\n      upgrade Nix. You may use `nix-env --version&amp;#39; to check which
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; version you have.\n\n    - If you installed Nix using the install script (https://nixos.org/nix/install),\n
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  it is safe to upgrade by running it again:\n\n          curl -L https://nixos.org/nix/install | sh\n\n
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;For more information, please see the NixOS release notes at\n    https://nixos.org/nixos/manual
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; or locally at\n    \${toString ./nixos/doc/manual/release-notes}.\n\n    If you need further help,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; see https://nixos.org/nixos/support.html\n  &amp;#39;&amp;#39;\n\nelse\n\n  import ./pkgs/top-level/impure.nix\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-repl&amp;gt; :l &amp;lt;nixpkgs/lib&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-repl&amp;gt; importJSON ./pkgs/development/python-modules/notebook/missing-hashes.json &lt;span style=&#34;color:#75715e&#34;&gt;# Return the nix value for JSON&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@nx/nx-darwin-arm64@npm:16.10.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aabcc8499602b98c9fc3b768fe46dfd4e1b818caa84b740bd4f73a2e4528c719b979ecb1c10a0d793a1fead83073a08bc86417588046aa3e587e80af880bffd3&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@nx/nx-darwin-x64@npm:16.10.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;9dd20f45f646d05306f23f5abb7ade69dcb962e23a013101e93365847722079656d30a19c735fdcfa5c4e0fdf08691f9d621073c58aef2861c26741ff4638375&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@nx/nx-freebsd-x64@npm:16.10.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;35b93aabe3b3274d53157a6fc10fec7e341e75e6818e96cfbc89c3d5b955d225ca80a173630b6aa43c448c6b53b23f06a2699a25c0c8bc71396ee20a023d035f&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@nx/nx-linux-arm-gnueabihf@npm:16.10.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;697b9fa4c70f84d3ea8fe32d47635864f2e40b0ceeb1484126598c61851a2ec34b56bb3eeb9654c37d9b14e81ce85a36ac38946b4b90ca403c57fe448be51ccb&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@nx/nx-linux-arm64-gnu@npm:16.10.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;001e71fedfc763a4dedd6c5901b66a4a790d388673fb74675235e19bb8fe031ff3755568ed867513dd003f873901fabda31a7d5628b39095535cb9f6d1dc7191&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@nx/nx-linux-arm64-musl@npm:16.10.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;58e3b71571bdadd2b0ddd24ea6e30cd795e706ada69f685403412c518fba1a2011ac8c2ac46145eab14649aa5a78e0cedcdb4d327ccb3b6ec12e055171f3840b&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@nx/nx-linux-x64-gnu@npm:16.10.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;97729a7efb27301a67ebf34739784114528ddb54047e63ca110a985eaa0763c5b1ea7c623ead1a2266d07107951be81e82ffa0a30e6e4d97506659303f2c8c78&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@nx/nx-linux-x64-musl@npm:16.10.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;442bdbd5e61324a850e4e7bd6f54204108580299d3c7c4ebcec324da9a63e23f48d797a87593400fc32af78a3a03a3c104bfb360f107fe732e6a6c289863853a&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@nx/nx-win32-arm64-msvc@npm:16.10.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b5c74184ebfc70294e85f8e309f81c3d40b5cf99068891e613f3bef5ddb946bef7c9942d9e6c7688e22006d45d786342359af3b4fc87aadf369afcda55c73187&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@nx/nx-win32-x64-msvc@npm:16.10.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c5b174ebd7a5916246088e17d3761804b88f010b6b3f930034fa49af00da33b6d1352728c733024f736e4c2287def75bafdc3d60d8738bd24b67e9a4f11763f8&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-repl&amp;gt; builtins.toJSON  &lt;span style=&#34;color:#75715e&#34;&gt;# serialize&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;«primop toJSON»
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-repl&amp;gt; builtins.fromTOML
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;«primop fromTOML»
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nix-repl&amp;gt; builtins.toXML
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For more serialization formats see &lt;code&gt;nixpkgs/lib/generators.nix&lt;/code&gt; as well as in
&lt;code&gt;nixpkgs/pkgs/pkgs-lib/formats/&lt;/code&gt; we can see them with the &lt;code&gt;nix repl&lt;/code&gt; as follows:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Btrfs_impermanence</title>
      <link>http://localhost:1313/posts/btrfs_impermanence/</link>
      <pubDate>Sun, 15 Jun 2025 18:15:13 -0400</pubDate>
      <guid>http://localhost:1313/posts/btrfs_impermanence/</guid>
      <description>&lt;h1 id=&#34;unencrypted-btrfs-impermanence-with-flakes&#34;&gt;Unencrypted BTRFS Impermanence with Flakes&lt;/h1&gt;
&lt;p&gt;Figure 1: &lt;strong&gt;Impermanence Logo&lt;/strong&gt;: Image of the Impermanence logo. Sourced from
the&lt;/p&gt;
&lt;p&gt;This guide is for an unencrypted setup, there are a few links at the end for
encrypted setups. This guide follows the previous
&lt;a href=&#34;https://saylesss88.github.io/nix/impermanence.html&#34;&gt;minimal install guide&lt;/a&gt; but
you should be able to adjust it carefully to meet your needs.&lt;/p&gt;
&lt;p&gt;This section details how to set up impermanence on your NixOS system using BTRFS
subvolumes. With impermanence, your operating system&amp;rsquo;s root filesystem will
reset to a pristine state on each reboot, while designated directories and files
remain persistent. This provides a highly reliable and rollback-friendly system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Minimal_btrfs_subvolume_install_disko</title>
      <link>http://localhost:1313/posts/minimal_btrfs_subvolume_install_disko/</link>
      <pubDate>Sun, 15 Jun 2025 18:14:54 -0400</pubDate>
      <guid>http://localhost:1313/posts/minimal_btrfs_subvolume_install_disko/</guid>
      <description>&lt;h1 id=&#34;minimal-btrfs-subvol-install-with-disko-and-flakes&#34;&gt;Minimal BTRFS-Subvol Install with Disko and Flakes&lt;/h1&gt;
&lt;h2 id=&#34;why-i-chose-btrfs&#34;&gt;Why I Chose BTRFS&lt;/h2&gt;
&lt;p&gt;I chose BTRFS because I was already familiar with it from using it with Arch
Linux and I found it to be very easy to use. From what I&amp;rsquo;ve read, there are
licensing issues between the Linux Kernel and ZFS which means that ZFS is not
part of the Linux Kernel; it&amp;rsquo;s maintained by the OpenZFS project and available
as a separate kernel module. This can cause issues and make you think more about
your filesystem than I personally want to at this point.&lt;/p&gt;</description>
    </item>
    <item>
      <title>hacking_the_helix_flake</title>
      <link>http://localhost:1313/posts/hacking_the_helix_flake/</link>
      <pubDate>Fri, 30 May 2025 19:23:32 -0400</pubDate>
      <guid>http://localhost:1313/posts/hacking_the_helix_flake/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#chapter-44&#34;&gt;Chapter 4.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#understanding-the-helix-flake-and-modifying-its-behavior&#34;&gt;Understanding the Helix Flake and Modifying its Behavior&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#understanding-the-helix-flakenix&#34;&gt;Understanding the Helix flake.nix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#top-level-metadata&#34;&gt;Top-Level Metadata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#inputs&#34;&gt;Inputs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#outputs-function&#34;&gt;Outputs Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#common-setup&#34;&gt;Common Setup&lt;/a&gt; - &lt;a href=&#34;#breaking-down-helixdefaultnix&#34;&gt;Breaking Down &lt;code&gt;helix/default.nix&lt;/code&gt;&lt;/a&gt; - &lt;a href=&#34;#making-actual-changes&#34;&gt;Making Actual Changes&lt;/a&gt; - &lt;a href=&#34;#another-way-to-modify-behavior&#34;&gt;Another way to Modify Behavior&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/helix.png&#34;
         alt=&#34;helix logo&#34; width=&#34;1000&#34;/&gt; 
&lt;/figure&gt;

&lt;h1 id=&#34;understanding-the-helix-flake-and-modifying-its-behavior&#34;&gt;Understanding the Helix Flake and Modifying its Behavior&lt;/h1&gt;
&lt;p&gt;As we&amp;rsquo;ve seen from previous examples, the helix editor repository includes a few
&lt;code&gt;.nix&lt;/code&gt; files including a &lt;code&gt;flake.nix&lt;/code&gt;. Their flake uses a lot of idiomatic Nix
code and advanced features. First I will break down their &lt;code&gt;flake.nix&lt;/code&gt; and
&lt;code&gt;default.nix&lt;/code&gt; to understand why they do certain things. And finally, we will
change the build to &amp;ldquo;debug&amp;rdquo; mode demonstrating how easily you can modify the
behavior of a package defined within a Nix flake without changing the original
source code or the upstream flake directly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using_nushell_with_nixos</title>
      <link>http://localhost:1313/posts/using_nushell_with_nixos/</link>
      <pubDate>Fri, 16 May 2025 19:54:01 -0400</pubDate>
      <guid>http://localhost:1313/posts/using_nushell_with_nixos/</guid>
      <description>&lt;h2 id=&#34;nushell-and-nixos&#34;&gt;Nushell and NixOS&lt;/h2&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/nu.png&#34;
         alt=&#34;nushell logo&#34; width=&#34;1000&#34;/&gt; 
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;:I recently switched default shells from zsh to nushell, this post
is about some of the challenges and advantages of using nushell with NixOS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While the average user might not immediately see significant advantages, those
who frequently work with structured data formats like JSON, YAML, and CSV –
such as developers interacting with APIs, system administrators managing
configurations, and data professionals – will likely find Nushell&amp;rsquo;s native
data handling and powerful pipeline capabilities a plus. Additionally, users
who value a more consistent and safer scripting experience might appreciate
Nushell&amp;rsquo;s language-first design and features like strong typing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nixpkgs_pull_requests</title>
      <link>http://localhost:1313/posts/nixpkgs_pull_requests/</link>
      <pubDate>Thu, 15 May 2025 13:02:06 -0400</pubDate>
      <guid>http://localhost:1313/posts/nixpkgs_pull_requests/</guid>
      <description>&lt;h1 id=&#34;nixpkgs-pull-requests&#34;&gt;Nixpkgs Pull Requests&lt;/h1&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/gruv16.png&#34;
         alt=&#34;window_view&#34; width=&#34;1000&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Pull requests&lt;/strong&gt; communicate changes to a branch in a repository. Once a pull
request is opened, you can review changes with collaborators and add follow-up
commits.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;pull request&lt;/strong&gt; is a proposal to merge a set of changes from one branch
into another. In a pull request, collaborators can review and discuss the
proposed set of changes before they integrate the changes into the main
codebase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pull requests display the differences, or diffs, between the content in the
source branch and the content in the target branch.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Debugging_and_tracing_modules</title>
      <link>http://localhost:1313/posts/debugging_and_tracing_modules/</link>
      <pubDate>Thu, 15 May 2025 10:08:17 -0400</pubDate>
      <guid>http://localhost:1313/posts/debugging_and_tracing_modules/</guid>
      <description>&lt;h1 id=&#34;debugging-and-tracing-nixos-modules&#34;&gt;Debugging and Tracing NixOS Modules&lt;/h1&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/gruv17.png&#34;
         alt=&#34;window_space&#34; width=&#34;1000&#34;/&gt; 
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Other related post if you haven&amp;rsquo;t read my previous post on modules, that may
be helpful before reading this one:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://saylesss88.github.io/posts/nix_modules_explained/&#34;&gt;nix-modules-explained&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This post is my notes following Nix Hour 40. If it seems a little chaotic,
try watching one. They are hard to follow if you&amp;rsquo;re not extremely
familiar with the concepts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=aLy8id4wr-M&amp;amp;t=2120s&#34;&gt;Nix Hour 40&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nix Code is particularly hard to &lt;strong&gt;debug&lt;/strong&gt; because of (e.g. lazy evaluation,
declarative nature, layered modules)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using_overlays_to_add_packages</title>
      <link>http://localhost:1313/posts/using_overlays_to_add_packages/</link>
      <pubDate>Wed, 14 May 2025 19:28:57 -0400</pubDate>
      <guid>http://localhost:1313/posts/using_overlays_to_add_packages/</guid>
      <description>&lt;h1 id=&#34;using-overlays-to-add-packages-that-arent-in-nixpkgs&#34;&gt;Using Overlays to add Packages that aren&amp;rsquo;t in Nixpkgs&lt;/h1&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;images/pokego.png&#34;
         alt=&#34;window_view&#34; width=&#34;1000&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;It is very common to use overlays in Nix to install packages that aren&amp;rsquo;t
available in the standard Nixpkgs repository.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Overlays are one of the primary and recommended ways to extend and customize
your Nix environment. It&amp;rsquo;s important to remember that Nix overlays are made to
allow you to modify or extend the package set provided by Nixpkgs (or other
Nix sources) without directly altering the original package definitions. This
is crucial for maintaining reproducibility and avoiding conflicts. Overlays
are essentially functions that take the previous package set and allow you to
add, modify, or remove packages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nix_lang_basics</title>
      <link>http://localhost:1313/posts/nix_lang_basics/</link>
      <pubDate>Wed, 14 May 2025 19:28:12 -0400</pubDate>
      <guid>http://localhost:1313/posts/nix_lang_basics/</guid>
      <description>&lt;h1 id=&#34;the-nix-language&#34;&gt;The Nix Language&lt;/h1&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/gruv13.png&#34;
         alt=&#34;window_view&#34; width=&#34;1000&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Nix as a programming language can be thought of as a kind of &amp;ldquo;JSON, but with
functions&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;All statements are declarative, meaning that there&amp;rsquo;s no sequential flow of
instructions that makes up a Nix package. Instead, functions are called that
assign values to fields in attribute sets, which in turn may get assigned to
other values.&lt;/p&gt;
&lt;h2 id=&#34;how-does-nix-work&#34;&gt;How does Nix work&lt;/h2&gt;
&lt;p&gt;Nix is a pure, functional, lazy, declarative, and reproducible programming
language.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Comparing_flakes_to_traditional_nix</title>
      <link>http://localhost:1313/posts/comparing_flakes_to_traditional_nix/</link>
      <pubDate>Wed, 14 May 2025 19:27:18 -0400</pubDate>
      <guid>http://localhost:1313/posts/comparing_flakes_to_traditional_nix/</guid>
      <description>&lt;h1 id=&#34;introduction-flakes-and-traditional-nix&#34;&gt;Introduction: Flakes and Traditional Nix&lt;/h1&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/nixWinter.png&#34;
         alt=&#34;nix winter&#34; width=&#34;1000&#34;/&gt; 
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;This post is based on notes from Nix-Hour #4, comparing Traditional Nix and Flakes, focusing on achieving pure build results. See the &lt;a href=&#34;https://www.youtube.com/watch?v=atmoYyBAhF4&#34;&gt;YouTube video&lt;/a&gt; for the original content. This guide adapts the information for clarity and ease of understanding.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-is-purity-in-nix&#34;&gt;What is Purity in Nix?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A key benefit of Nix Flakes is their &lt;em&gt;default&lt;/em&gt; enforcement of &lt;strong&gt;pure evaluation&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Nix, an &lt;strong&gt;impure operation&lt;/strong&gt; depends on something &lt;em&gt;outside&lt;/em&gt; its explicit inputs. Examples include:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Declarative_depinject</title>
      <link>http://localhost:1313/posts/declarative_depinject/</link>
      <pubDate>Wed, 14 May 2025 19:26:36 -0400</pubDate>
      <guid>http://localhost:1313/posts/declarative_depinject/</guid>
      <description>&lt;h1 id=&#34;declarative-dependency-injection-in-nix-flakes&#34;&gt;Declarative Dependency Injection in Nix Flakes&lt;/h1&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/gruv6.png&#34;
         alt=&#34;cyber&#34; width=&#34;1000&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;This post explores a method for injecting dependencies into NixOS modules from
a flake in a more declarative way, offering an alternative to &lt;code&gt;specialArgs&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-problem-with-specialargs&#34;&gt;The Problem with specialArgs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As mentioned in &lt;a href=&#34;https://saylesss88.github.io/posts/nix_flakes_tips/&#34;&gt;post&lt;/a&gt;,
&lt;code&gt;specialArgs&lt;/code&gt; and &lt;code&gt;extraSpecialArgs&lt;/code&gt; can be used to pass dependencies and
variables from flakes to modules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;However, &lt;code&gt;specialArgs&lt;/code&gt; injects values directly into every module&amp;rsquo;s argument
list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This approach deviates from NixOS&amp;rsquo;s typical declarative data flow model.
Instead of explicit dependency passing, modules receive extra, unstructured
variables that aren&amp;rsquo;t part of the standard module options.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Derivations_explained</title>
      <link>http://localhost:1313/posts/derivations_explained/</link>
      <pubDate>Wed, 14 May 2025 19:25:48 -0400</pubDate>
      <guid>http://localhost:1313/posts/derivations_explained/</guid>
      <description>&lt;h1 id=&#34;introduction-to-nix-derivations&#34;&gt;Introduction to Nix Derivations&lt;/h1&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/gruv10.png&#34;
         alt=&#34;gruv10&#34; width=&#34;1000&#34;/&gt; 
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A derivation in Nix is a fundamental concept that describes how to build a piece of software or a resource (e.g., a package, library, or configuration file). Think of it as a recipe for creating something within the Nix ecosystem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For beginners, the analogy of a cooking recipe is helpful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ingredients (Dependencies):&lt;/strong&gt; What other software or libraries are needed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Steps (Build Instructions):&lt;/strong&gt; The commands to compile, configure, and install.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Final Dish (Output):&lt;/strong&gt; The resulting package or resource.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A Nix derivation encapsulates all this information, telling Nix what inputs
to use, how to build it, and what the final output should be.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simple_nix_service</title>
      <link>http://localhost:1313/posts/simple_nix_service/</link>
      <pubDate>Wed, 14 May 2025 19:25:11 -0400</pubDate>
      <guid>http://localhost:1313/posts/simple_nix_service/</guid>
      <description>&lt;h1 id=&#34;building-a-custom-nixos-service-with-flakes-and-overlays&#34;&gt;Building a Custom NixOS Service with Flakes and Overlays&lt;/h1&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/gruv12.png&#34;
         alt=&#34;gruv12&#34; width=&#34;1000&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;TL;DR NixOS&amp;rsquo;s declarative configuration and flakes make it easy to create
custom services. This post shows how to build a minimal service using flakes
and overlays for a &amp;ldquo;meow&amp;rdquo; command&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This will be a complete minimal configuration for testing purposes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;create-project-directory&#34;&gt;Create Project Directory&lt;/h2&gt;
&lt;p&gt;Start by creating a directory to hold your project, I called mine &lt;code&gt;meow&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir meow &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd meow
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;create-flake&#34;&gt;Create flake&lt;/h2&gt;
&lt;p&gt;Create a &lt;code&gt;flake.nix&lt;/code&gt; with the following:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nix_flakes_tips</title>
      <link>http://localhost:1313/posts/nix_flakes_tips/</link>
      <pubDate>Wed, 14 May 2025 19:24:27 -0400</pubDate>
      <guid>http://localhost:1313/posts/nix_flakes_tips/</guid>
      <description>&lt;h1 id=&#34;shallow-clone-nixpkgs&#34;&gt;Shallow Clone Nixpkgs&lt;/h1&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/gruv8.png&#34;
         alt=&#34;gruv8&#34; width=&#34;1000&#34;/&gt; 
&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;Shallow clone nixpkgs, the full Git history isn&amp;rsquo;t always necessary and this
can speed up build times.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;The only issue I&amp;rsquo;ve had is &lt;code&gt;nix-index-database&lt;/code&gt; not working well with the
shallow clone&amp;hellip; Other than that no issues after running for a few months.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# flake.nix&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git+https://github.com/NixOS/nixpkgs?shallow=1&amp;amp;ref=nixos-unstable&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Some times when you might need a full clone are debugging and working with
repository history but those are rare.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;import-your-non-flake-wallpaper-repo&#34;&gt;Import your Non-Flake Wallpaper Repo&lt;/h2&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Importing your non-flake wallpapers repo:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# flake.nix&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wallpapers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:saylesss88/wallpapers&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      flake &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;After adding the input I can access individual wallpapers by adding the &lt;code&gt;inputs&lt;/code&gt; argument and
something like &lt;code&gt;path = &amp;quot;${inputs.wallpapers}/Aesthetic Scenery.jpg&amp;quot;;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;understanding--patterns&#34;&gt;Understanding @-patterns&lt;/h2&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Understanding &lt;code&gt;@-patterns&lt;/code&gt;, being able to reference your outputs argument set as a whole. An
&lt;code&gt;@-pattern&lt;/code&gt; is a way for a function can access variadic attributes (i.e. varying number of
arguments).&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# flake.nix&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    home-manager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:nix-community/home-manager/master&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    home-manager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;follows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nixpkgs&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stylix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:danth/stylix&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    home-manager&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt; inputs:
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the above example to add the modules to your nixosConfigurations you would add something
like this:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Working_with_nixpkgs_locally</title>
      <link>http://localhost:1313/posts/working_with_nixpkgs_locally/</link>
      <pubDate>Wed, 14 May 2025 19:23:32 -0400</pubDate>
      <guid>http://localhost:1313/posts/working_with_nixpkgs_locally/</guid>
      <description>&lt;p&gt;/home/jr/blog/content/posts/working_with_nixpkgs_locally.md: line 1: q: command not found&lt;/p&gt;
&lt;h1 id=&#34;working-with-nixpkgs-locally-benefits-and-best-practices&#34;&gt;Working with Nixpkgs Locally: Benefits and Best Practices&lt;/h1&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/gruv18.png&#34;
         alt=&#34;gruv18&#34; width=&#34;1000&#34;/&gt; 
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;Nixpkgs, the package repository for NixOS, is a powerful resource for building and customizing software.&lt;/li&gt;
&lt;li&gt;Working with a local copy enhances development, debugging, and contribution workflows.&lt;/li&gt;
&lt;li&gt;This post covers setting up a local Nixpkgs repository, searching for dependencies, and leveraging its advantages, incorporating tips from the Nix community.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;i-why-work-with-nixpkgs-locally&#34;&gt;I. Why Work with Nixpkgs Locally?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A local Nixpkgs repository offers significant advantages for Nix developers:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building_your_config_as_a_package</title>
      <link>http://localhost:1313/posts/building_your_config_as_a_package/</link>
      <pubDate>Wed, 14 May 2025 19:21:54 -0400</pubDate>
      <guid>http://localhost:1313/posts/building_your_config_as_a_package/</guid>
      <description>&lt;h1 id=&#34;building-your-configuration-as-a-package&#34;&gt;Building your configuration as a Package&lt;/h1&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/gruv4.png&#34;
         alt=&#34;gruv4&#34; width=&#34;1000&#34;/&gt; 
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TL;DR This post demonstrates other ways to modularize your config as well as
going into more advanced outputs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This allows you to build your configuration as a package allowing you to
separate the process of creating a configuration artifact and applying it to
the live system giving you a reusable artifact that can be used to deploy to
different systems. This can make it easier to isolate it from other parts of
your system making debugging easier.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Conditional_configuration</title>
      <link>http://localhost:1313/posts/conditional_configuration/</link>
      <pubDate>Wed, 14 May 2025 19:21:09 -0400</pubDate>
      <guid>http://localhost:1313/posts/conditional_configuration/</guid>
      <description>&lt;h1 id=&#34;conditional-configuration&#34;&gt;Conditional Configuration&lt;/h1&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/gruv5.png&#34;
         alt=&#34;gruv5&#34; width=&#34;700&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;With options it&amp;rsquo;s easy to conditionally install something based on if another
program is enabled in your configuration.&lt;/p&gt;
&lt;h2 id=&#34;hyprland-module&#34;&gt;Hyprland Module&lt;/h2&gt;
&lt;p&gt;For example, if I have an option to enable or disable hyprland like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# hyprland.nix&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  pkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lib&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  config&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inputs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}: &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cfg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;custom&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hyprland;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;custom&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hyprland &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    enable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mkOption {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;types&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bool;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      default &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      description &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enable hyprland module&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mkIf cfg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    home&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;packages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pkgs; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# swww&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      grim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      slurp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      wl-clipboard-rs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      cliphist
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      swappy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ydotool
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      wpaperd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      wofi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      hyprpicker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pavucontrol
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      blueman
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# lxqt.lxqt-policykit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      brightnessctl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      polkit_gnome
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      wlr-randr
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      wtype
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      rose-pine-cursor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# nwg-look&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# yad&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# gtk-engine-murrine&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# .. snip ..&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Since the above module is set to false, it is necessary to add
&lt;code&gt;custom.hyprland.enable = true&lt;/code&gt; to my &lt;code&gt;home.nix&lt;/code&gt; to have Nix add it
to my configuration. And since &lt;code&gt;home.packages&lt;/code&gt; is wrapped in
&lt;code&gt;config = lib.mkIf cfg.enable&lt;/code&gt; Those packages will only be installed
if the module is enabled.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Top_level_attributes_explained</title>
      <link>http://localhost:1313/posts/top_level_attributes_explained/</link>
      <pubDate>Wed, 14 May 2025 19:20:34 -0400</pubDate>
      <guid>http://localhost:1313/posts/top_level_attributes_explained/</guid>
      <description>&lt;h1 id=&#34;understanding-top-level-attributes-in-nixos-modules&#34;&gt;Understanding Top-Level Attributes in NixOS Modules&lt;/h1&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/gruv9.png&#34;
         alt=&#34;cyber&#34; width=&#34;1000&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;This explanation is based on insights from Infinisil, a prominent figure in the
Nix community, to help clarify the concept of top-level attributes within
NixOS modules.&lt;/p&gt;
&lt;h2 id=&#34;the-core-of-a-nixos-system-systembuildtoplevel&#34;&gt;The Core of a NixOS System: &lt;code&gt;system.build.toplevel&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;In a NixOS system, everything is built from a single &amp;ldquo;system derivation.&amp;rdquo; The
command &lt;code&gt;nix-build &#39;&amp;lt;nixpkgs/nixos&amp;gt;&#39; -A system&lt;/code&gt; initiates this build process.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-A system&lt;/code&gt; part tells Nix to focus on the &lt;code&gt;system&lt;/code&gt; attribute defined in
the &lt;code&gt;&#39;&amp;lt;nixpkgs/nixos&amp;gt;&#39;&lt;/code&gt; file (which is essentially &lt;code&gt;./default.nix&lt;/code&gt; within the
Nixpkgs repository).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nix_flakes_explained</title>
      <link>http://localhost:1313/posts/nix_flakes_explained/</link>
      <pubDate>Wed, 14 May 2025 19:19:51 -0400</pubDate>
      <guid>http://localhost:1313/posts/nix_flakes_explained/</guid>
      <description>&lt;h1 id=&#34;nix-flakes-explained&#34;&gt;Nix Flakes Explained&lt;/h1&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/gruv23.png&#34;
         alt=&#34;gruv3&#34; width=&#34;1000&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;This explanation highlights common areas of confusion for those new to Nix
Flakes, aiming to clarify concepts rather than serve as a comprehensive guide.&lt;/p&gt;
&lt;h2 id=&#34;what-is-a-nix-flake&#34;&gt;What is a Nix Flake?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At its core, a flake is a source tree (like a Git repository) that contains
a &lt;code&gt;flake.nix&lt;/code&gt; file. This file provides a standardized way to access Nix
artifacts such as packages and modules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Think of &lt;code&gt;flake.nix&lt;/code&gt; as the central entry point of a flake. It not only
defines what the flake produces but also declares its dependencies.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding_package_definitions</title>
      <link>http://localhost:1313/posts/understanding_package_definitions/</link>
      <pubDate>Wed, 14 May 2025 19:19:10 -0400</pubDate>
      <guid>http://localhost:1313/posts/understanding_package_definitions/</guid>
      <description>&lt;h1 id=&#34;understanding-package-definitions-in-nix&#34;&gt;Understanding Package Definitions in Nix&lt;/h1&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/gruv1.png&#34;
         alt=&#34;gruvvy-bedroom&#34; width=&#34;1000&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;In Nix, the concept of a &lt;strong&gt;package&lt;/strong&gt; can refer to two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A collection of files and data that constitute a piece of software or an
artifact.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A Nix &lt;strong&gt;expression&lt;/strong&gt; that describes how to create such a collection. This
expression acts as a blueprint before the package exists in a tangible form.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The process begins with writing a &lt;strong&gt;package definition&lt;/strong&gt; using the Nix language.
This definition contains the necessary instructions and metadata about the
software you intend to &amp;ldquo;package.&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nix_repl_tips</title>
      <link>http://localhost:1313/posts/nix_repl_tips/</link>
      <pubDate>Wed, 14 May 2025 19:18:13 -0400</pubDate>
      <guid>http://localhost:1313/posts/nix_repl_tips/</guid>
      <description>&lt;h1 id=&#34;nix-repl-list-available-commands&#34;&gt;Nix Repl List available commands&lt;/h1&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/gruv11.png&#34;
         alt=&#34;gruv11&#34; width=&#34;1000&#34;/&gt; 
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://nix.dev/manual/nix/2.17/command-ref/new-cli/nix3-repl&#34;&gt;Nix Reference Manual Nix Repl&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The command: &lt;code&gt;nix repl&lt;/code&gt; - starts an interactive environment for evaluating
Nix expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This command provides an interactive environment for evaluating Nix expressions. (REPL stands for &amp;lsquo;read–eval–print loop&amp;rsquo;.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On startup, it loads the Nix expressions named files and adds them into the
lexical scope. You can load addition files using the &lt;code&gt;:l &amp;lt;filename&amp;gt;&lt;/code&gt; command,
or reload all files using &lt;code&gt;:r&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding_nix_functions</title>
      <link>http://localhost:1313/posts/understanding_nix_functions/</link>
      <pubDate>Wed, 14 May 2025 19:17:32 -0400</pubDate>
      <guid>http://localhost:1313/posts/understanding_nix_functions/</guid>
      <description>&lt;h1 id=&#34;understanding-nix-functions&#34;&gt;Understanding Nix Functions&lt;/h1&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/nixLogo.png&#34;
         alt=&#34;NixFlakeLogo&#34; width=&#34;500&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Functions are a fundamental concept in Nix and are prevalent throughout Nix code. Grasping how they work is crucial for understanding and writing Nix expressions.&lt;/p&gt;
&lt;h2 id=&#34;the-single-argument-nature-of-nix-functions&#34;&gt;The Single-Argument Nature of Nix Functions&lt;/h2&gt;
&lt;p&gt;A key concept to understand is that in Nix, every function conceptually takes &lt;strong&gt;exactly one argument&lt;/strong&gt;. What might appear as multi-argument functions are actually achieved through a technique called &lt;strong&gt;currying&lt;/strong&gt;, where a series of nested single-argument functions are used.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Intro_to_jujutsu</title>
      <link>http://localhost:1313/posts/intro_to_jujutsu/</link>
      <pubDate>Wed, 14 May 2025 19:07:59 -0400</pubDate>
      <guid>http://localhost:1313/posts/intro_to_jujutsu/</guid>
      <description>&lt;h1 id=&#34;intro-to-jujutsu-using-jj-in-an-existing-git-repo&#34;&gt;Intro to Jujutsu (Using jj in an existing Git Repo)&lt;/h1&gt;
&lt;p&gt;&lt;img alt=&#34;Jujutsu Logo&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/jujutsu.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can use jujutsu (jj) with existing Git repositories with one command.
&lt;code&gt;jj git init --colocate&lt;/code&gt; or &lt;code&gt;jj git init --git-repo /path/to/git_repository&lt;/code&gt;.
The native repository format for jj is still a work in progress so people
typically use a &lt;code&gt;git&lt;/code&gt; repository for backend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlike &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;jj&lt;/code&gt; has no index &amp;ldquo;staging area&amp;rdquo;. It treats the working copy
as an actual commit. When you make changes to files, these changes are
automatically recorded to the working commit. There&amp;rsquo;s no need to explicitly
stage changes because they are already part of the commit that represents
your current working state.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nix_modules_explained</title>
      <link>http://localhost:1313/posts/nix_modules_explained/</link>
      <pubDate>Wed, 14 May 2025 19:03:40 -0400</pubDate>
      <guid>http://localhost:1313/posts/nix_modules_explained/</guid>
      <description>&lt;h1 id=&#34;nixos-modules&#34;&gt;NixOS Modules&lt;/h1&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/gruv3.png&#34;
         alt=&#34;gruv3&#34; width=&#34;1000&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;TL;DR: In this post I break down the NixOS module system and explain how to
define options. As well as how to test modules with the repl.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most modules are functions that take an attribute set and return an attribute
set.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Refresher&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An &lt;strong&gt;attribute set&lt;/strong&gt; is a collection of name-value pairs wrapped in curly
braces:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  int &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;function&lt;/strong&gt; with an attribute set argument:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ a&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; b }: a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;The simplest possible &lt;strong&gt;NixOS Module&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;NixOS produces a full system configuration by combining smaller, more isolated
and reusable components: &lt;strong&gt;Modules&lt;/strong&gt;. In my opinion modules are one of the
first things you should understand when learning about NixOS.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
